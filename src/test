#include "main.h"

int gen_command_list_test(command **cmd_list, char *line)
{
	int nb_cmds = 0, nb_args_curr_cmd = 0, next_token_is_redir_file = 0, i;
	char **args_curr_cmd = NULL;
	char *file_for_redir = NULL, *delim = " \n", *line_to_NULL = line, *token = NULL;
	operator op = NONE;

	while(1)
	{
		if (next_token_is_redir_file == 1)
		{
			file_for_redir = _strdup(strtok(line_to_NULL, delim));
			continue;
		}
		token = strtok(line_to_NULL, delim);
		if (token == NULL)
			break;
		line_to_NULL = NULL;
		op = token_is_op(token, &next_token_is_redir_file);
		if (op == NONE) /* token isn't an operator */
		{
			/* In case there are no spaces between operators and words */
			op = token_contains_op(&token, &file_for_redir, &next_token_is_redir_file);
			if (op == NONE) /* token doesn't contain an operator */
				add_new_arg(&args_curr_cmd, token, nb_args_curr_cmd);
		}
		else if (op == PIPE)
		{

		}
			
	}
	/* Add last command (or the only command in the line) */
	add_new_command(cmd_list, &nb_cmds, args_curr_cmd, nb_args_curr_cmd, op, file_for_redir);
}


operator token_is_op(char *token, int *next_token_is_redir_file)
{
	/* The order is very important, because otherwise _strstr will find the wrong substring */
	/* For example if it checks ">" before ">>", the result will succeed even if op is ">>" */
	op_str_to_enum_value conv[] = {{">>", TO_FILE_APPEND}, {">", TO_FILE},
	{"<<", HERE_DOCUMENT}, {"<", FROM_FILE}, {"|", PIPE}, {NULL, NONE}};
	op_str_to_enum_value *ptr = conv; /* pointer to iterate through conv array */

	while (ptr->op_str != NULL)
	{
		if (_strcmp(*token, ptr->op_str) == 0)
		{
			if (ptr->op_enum_value != PIPE)
				*next_token_is_redir_file = 1;
			return (ptr->op_enum_value);
		}
		ptr++;
	}
	return (NONE); /* token is not an operator */
}

operator token_contains_op(char **token, char **file_for_redir, int *next_token_is_redir_file)
{
	/* The order is very important, because otherwise _strstr will find the wrong substring */
	/* For example if it checks ">" before ">>", the result will succeed even if op is ">>" */
	op_str_to_enum_value conv[] = {{">>", TO_FILE_APPEND}, {">", TO_FILE},
	{"<<", HERE_DOCUMENT}, {"<", FROM_FILE}, {"|", PIPE}, {NULL, NONE}};
	op_str_to_enum_value *ptr = conv; /* pointer to iterate through conv array */

	while (ptr->op_str != NULL)
	{
		if (_strstr(*token, ptr->op_str))
		{
			*token = strtok(*token, ptr->op_str);
			if (ptr->op_enum_value != PIPE)
			{
				*file_for_redir = strtok(NULL, ptr->op_str);
				if (file_for_redir == NULL)
					*next_token_is_redir_file;
			}
			return (ptr->op_enum_value);
		}
		ptr++;
	}
	return (NONE); /* No operator was found */
}